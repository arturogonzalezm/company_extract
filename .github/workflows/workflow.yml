name: Python CI

on: [push, pull_request]

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']  # This can be expanded to include other versions
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '2'

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests and Generate Coverage Report
        run: |
          pip install coverage pytest-cov
          coverage run -m pytest
          coverage report
          coverage xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  lint:
    name: Linting with Pylint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']  # This can be expanded to include other versions
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pylint

      - name: Code Review Scoring
        run: find . -path ./tests -prune -o -name '*.py' -print -exec pylint {} \;
      - name: Analysing code with PyLint
        run: |
          pylint $(find . -path ./tests -prune -o -name '*.py' -print) --fail-under=8.0
